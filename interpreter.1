#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 54 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2424 0 17 3 18 #";KALAA Interpreter"
0 0 22 29 1 #"\n"
0 0 17 3 29 #";Stuart Long and Jason Kuster"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";EECS 345 Interpreter 3"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"load"
0 0 22 3 1 #" "
0 0 19 3 20 #"\"functionParser.scm\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"ret"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 17 3 2 #";("
0 0 17 3 12 #"interpret-sl"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cadr"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lookup"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 25 #"main (interpret-global-sl"
0 0 17 3 2 #" ("
0 0 17 3 6 #"parser"
0 0 17 3 1 #" "
0 0 17 3 8 #"filename"
0 0 17 3 3 #") ("
0 0 17 3 7 #"new-env"
0 0 17 3 6 #")))) ("
0 0 17 3 19 #"interpret-global-sl"
0 0 17 3 2 #" ("
0 0 17 3 6 #"parser"
0 0 17 3 1 #" "
0 0 17 3 8 #"filename"
0 0 17 3 3 #") ("
0 0 17 3 7 #"new-env"
0 0 17 3 3 #")) "
0 0 17 3 3 #"ret"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 3 #"env"
0 0 17 3 3 #") ("
0 0 17 3 5 #"error"
0 0 17 3 1 #"("
0 0 17 3 32 #"\"break called outside of a loop\""
0 0 17 3 5 #"))) ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 3 #"env"
0 0 17 3 2 #")("
0 0 17 3 5 #"error"
0 0 17 3 1 #"("
0 0 17 3 43 #"\"continue called outside of a loop\"))))))))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 19 #"interpret-global-sl"
0 0 22 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 14 3 8 #"filename"
0 0 22 3 3 #") ("
0 0 14 3 7 #"new-env"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 12 #"interpret-sl"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"main"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 3 #")) "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #"("
0 0 19 3 32 #"\"break called outside of a loop\""
0 0 22 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 2 #")("
0 0 14 3 5 #"error"
0 0 22 3 1 #"("
0 0 19 3 35 #"\"continue called outside of a loop\""
0 0 22 3 10 #"))))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"interpret-global-sl"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"ptree"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptree"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 19 #"interpret-global-sl"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptree"
0 0 22 3 3 #") ("
0 0 14 3 22 #"interpret-global-stmnt"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptree"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"interpret-global-stmnt"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 12 #"pret-declare"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"function"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 13 #"pret-func-def"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 27 #"\"invalid global parse tree\""
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"pret-func-def"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 3 #") ("
0 0 14 3 12 #"get-func-env"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 2 #"))"
0 0 17 3 20 #";<--handle recursion"
0 0 22 29 1 #"\n"
0 0 22 3 51 #"                                                   "
0 0 20 3 1 #"'"
0 0 22 3 6 #"()))) "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 17 3 14 #";old interpret"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";(define interpret"
0 0 22 29 1 #"\n"
0 0 22 3 1 #" "
0 0 17 3 20 #"; (lambda (filename)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #" "
0 0 17 3 26 #";   (call/cc (lambda (ret)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #" "
0 0 17 3 181
(
 #";              (interpret-sl (parser filename) (new-env) ret (lambda"
 #" (env) (error(\"break called outside of a loop\"))) (lambda (env)(er"
 #"ror(\"continue called outside of a loop\"))))))))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"interpret-sl"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"ptree"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptree"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 12 #"interpret-sl"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptree"
0 0 22 3 3 #") ("
0 0 14 3 15 #"interpret-stmnt"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"ptree"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 2 #") "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"interpret-stmnt"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"pair?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 15 #"interpret-stmnt"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 11 #"pret-assign"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 12 #"pret-declare"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 7 #"pret-if"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"return"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"ret"
0 0 22 3 2 #" ("
0 0 14 3 11 #"pret-return"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"while"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 10 #"pret-while"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"break"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"cont"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 12 #"interpret-sl"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 12 #"pret-funcall"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"retval"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 20 #"\"invalid parse tree\""
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"pret-funcall"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 14 3 7 #"call/cc"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"ret"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 12 #"interpret-sl"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 4 #")) ("
0 0 14 3 14 #"setup-func-env"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 14 3 3 #"ret"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #"("
0 0 19 3 32 #"\"break called outside of a loop\""
0 0 22 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 2 #")("
0 0 14 3 5 #"error"
0 0 22 3 1 #"("
0 0 19 3 35 #"\"continue called outside of a loop\""
0 0 22 3 9 #")))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"setup-func-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 16 #";(error stmnt)))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 11 #"assign-args"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #") (("
0 0 14 3 5 #"caddr"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #")) "
0 0 17 3 47 #";this last arg returns a get-func-env procedure"
0 0 22 29 1 #"\n"
0 0 22 3 63
#"                                                               "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"assign-args"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #" "
0 0 14 3 8 #"func_env"
0 0 22 3 1 #" "
0 0 14 3 7 #"old_env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 8 #"func_env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #") "
0 0 14 3 7 #"old_env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 11 #"assign-args"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #") "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 8 #"func_env"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"pret-while"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"break"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 15 3 6 #"letrec"
0 0 22 3 3 #" (("
0 0 14 3 4 #"loop"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 14 3 7 #"eval-if"
0 0 22 3 1 #" "
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"if1"
0 0 22 3 1 #" "
0 0 14 3 9 #"if_enviro"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 53 #"                                                    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #"  "
0 0 14 3 3 #"if1"
0 0 22 29 1 #"\n"
0 0 22 3 57 #"                                                        ("
0 0 14 3 4 #"loop"
0 0 22 3 1 #" "
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #" ("
0 0 14 3 15 #"interpret-stmnt"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 9 #"if_enviro"
0 0 22 3 1 #" "
0 0 14 3 6 #"return"
0 0 22 3 1 #" "
0 0 14 3 5 #"break"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"e"
0 0 22 3 3 #") ("
0 0 14 3 4 #"loop"
0 0 22 3 1 #" "
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 56 #"                                                        "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 14 3 9 #"pop-frame"
0 0 22 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 10 #"push-frame"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 8 #"))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"pret-return"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"pret-declare"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"null arg passed to declare\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 3 #"() "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #") "
0 0 14 3 3 #"val"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"val2"
0 0 22 3 1 #" "
0 0 14 3 7 #"enviro2"
0 0 22 3 2 #") "
0 0 14 3 7 #"enviro2"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"pret-assign"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 27 #"\"null arg passed to assign\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 20 #"\"no value to assign\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 9 #"declared?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #" ("
0 0 14 3 9 #"bind-deep"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 8 #"))))))))"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";why isn't there an else here?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"pret-if"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"stmnt"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"eval-if"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"if1"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                 (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #")) "
0 0 17 3 8 #";no else"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"if1"
0 0 22 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 22 3 2 #" ("
0 0 14 3 15 #"interpret-stmnt"
0 0 22 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 10 #"push-frame"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #") "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 17 3 12 #";has an else"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"if1"
0 0 22 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 22 3 2 #" ("
0 0 14 3 15 #"interpret-stmnt"
0 0 22 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 10 #"push-frame"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #") "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 22 3 2 #" ("
0 0 14 3 15 #"interpret-stmnt"
0 0 22 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 22 3 1 #" "
0 0 14 3 5 #"stmnt"
0 0 22 3 3 #") ("
0 0 14 3 10 #"push-frame"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #") "
0 0 14 3 3 #"ret"
0 0 22 3 1 #" "
0 0 14 3 3 #"brk"
0 0 22 3 1 #" "
0 0 14 3 4 #"cont"
0 0 22 3 10 #"))))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"eval-if"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"if"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 2 #"if"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"               (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 2 #"if"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"k"
0 0 22 3 3 #" (("
0 0 14 3 7 #"getBool"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"if"
0 0 22 3 3 #")) "
0 0 14 3 3 #"val"
0 0 22 3 2 #") "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 2 #"if"
0 0 22 3 2 #") "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"val2"
0 0 22 3 1 #" "
0 0 14 3 7 #"enviro2"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 3 #" (("
0 0 14 3 7 #"getBool"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"if"
0 0 22 3 3 #")) "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 2 #") "
0 0 14 3 7 #"enviro2"
0 0 22 3 9 #")))))))))"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"getBool"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #">"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 1 #">"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"=="
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 1 #"="
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 1 #"<"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"!="
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 3 #") ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"<="
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 2 #"<="
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #">="
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 2 #">="
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"||"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"b1"
0 0 22 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 3 #") ("
0 0 14 3 2 #"or"
0 0 22 3 1 #" "
0 0 14 3 2 #"b1"
0 0 22 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 3 #")))"
0 0 17 3 55 #";for some reason just returning or gives a syntax error"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"b1"
0 0 22 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 3 #") ("
0 0 14 3 3 #"and"
0 0 22 3 1 #" "
0 0 14 3 2 #"b1"
0 0 22 3 1 #" "
0 0 14 3 2 #"b2"
0 0 22 3 3 #")))"
0 0 17 3 56 #";for some reason just returning and gives a syntax error"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"!"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 3 #"not"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"invalid operator\""
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 11 #"pret-assign"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 14 3 12 #"pret-funcall"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"retval"
0 0 22 3 2 #") "
0 0 14 3 6 #"retval"
0 0 22 3 3 #")) "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"!"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #") "
0 0 14 3 6 #"enviro"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #") "
0 0 14 3 6 #"enviro"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 3 #") ("
0 0 14 3 5 #"value"
0 0 22 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 2 #") "
0 0 14 3 6 #"enviro"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 46 #"                                             ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"val2"
0 0 22 3 1 #" "
0 0 14 3 7 #"enviro2"
0 0 22 3 3 #") ("
0 0 14 3 1 #"k"
0 0 22 3 3 #" (("
0 0 14 3 5 #"getOp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"expr"
0 0 22 3 3 #")) "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 2 #") "
0 0 14 3 7 #"enviro2"
0 0 22 3 9 #")))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"getOp"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 1 #"+"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 1 #"-"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 1 #"*"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 8 #"quotient"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"%"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 9 #"remainder"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 7 #"getBool"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 20 3 1 #"'"
0 0 22 3 12 #"((() ())) ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"push-frame"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"() ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"() "
0 0 20 3 1 #"'"
0 0 22 3 5 #"())) "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"pop-frame"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"lookup"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 18 #"\"var not declared\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 7 #"lookvar"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #")))) ("
0 0 14 3 7 #"lookvar"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"lookvar"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 22 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 22 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 39 #"\"variable declared but not initialized\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 7 #"lookvar"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"bind"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"box"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 6 #"())) ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 6 #";(cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 139
(
 #";((or (or (number? val) (boolean? val)) (null? val)) (cons (cons (co"
 #"ns var (caar env)) (cons (cons (box val) (cadar env)) '())) (cdr env"
 #")))"
) 0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 75
(
 #"; (else (error \"invalid type, variables must be an integer or boole"
 #"an\")))))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"bind-deep"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 17 3 26 #";shouldn't this error out?"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 17 3 58
#";((declared? var (cons (car env) '())) (bind var val env))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 9 #"declared?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 6 #"())) ("
0 0 14 3 10 #"handle-box"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 6 #"enviro"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 9 #"bind-deep"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"handle-box"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 22 3 2 #" ("
0 0 14 3 7 #"get-box"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")) "
0 0 14 3 3 #"val"
0 0 22 3 2 #") "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"get-box"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 19 #"\"couldn't find box\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 7 #"get-box"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"vals"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"declared?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 3 #") ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 10 #"\"null var\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #") "
0 0 14 3 3 #"var"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 4 #")) ("
0 0 14 3 9 #"declared?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 9 #"declared?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"get-func-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")) "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 12 #"get-func-env"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0           0
